@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        UserName:
        <input @bind="userInput" size="63" disabled="@(!IsConnected)"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" @onclick="SendUserTypingNotification" disabled="@(!IsConnected)" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

@if(UserMessages.Count > 0)
{
    <p>@UserMessages.Last()</p>
}

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>   
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private List<string> UserMessages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("UserTyping", (user) =>
        {
            var encodedMsg = $"{user} is typing a message...";
            UserMessages.Add(encodedMsg);
            StateHasChanged();
        });

       hubConnection.On<string>("ReceiveAnonMessage", (message) =>
        {
            var encodedMsg = $"Anonymous: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    async Task Send(){
        if(!string.IsNullOrEmpty(userInput)){
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
        else
        {
            await hubConnection.SendAsync("SendAnonMessage", messageInput);
        }
    }

    async Task SendUserTypingNotification(){
        if(!string.IsNullOrEmpty(userInput))
        {
            await hubConnection.SendAsync("SendUserTyping", userInput);
        }
        
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}